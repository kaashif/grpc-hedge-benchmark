// build.gradle
plugins {
    id 'java'
    id 'com.google.protobuf' version '0.9.4'
    id 'me.champeau.jmh' version '0.7.1'
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

def grpcVersion = '1.69.0'
def protobufVersion = '3.24.0'

dependencies {
    // gRPC
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"

    // Guava for RateLimiter
    implementation 'com.google.guava:guava:31.1-jre'

    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    // JMH
    testImplementation 'org.openjdk.jmh:jmh-core:1.36'
    testImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.36'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

jmh {
    warmupIterations = 0
    iterations = 1000
    fork = 1
    resultsFile = layout.buildDirectory.file("reports/jmh/results.json").get().asFile
    resultFormat = 'JSON'
    humanOutputFile = layout.buildDirectory.file("reports/jmh/human.txt").get().asFile
    // Configure for latency measurements
    timeUnit = 'ms'
    benchmarkMode = ['avgt']  // Use average time instead of throughput
    batchSize = 1  // Measure each operation individually
    // Include more detailed statistics
    operationsPerInvocation = 1
    synchronizeIterations = false

    timeOnIteration = '1s'

    // If you want to get sample distribution instead, use:
    // benchmarkMode = ['sample']
}